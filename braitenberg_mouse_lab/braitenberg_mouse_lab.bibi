<?xml version="1.0" encoding="UTF-8"?>
<bibi xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.humanbrainproject.eu/SP10/2014/BIBI" xsi:schemaLocation="http://schemas.humanbrainproject.eu/SP10/2014/BIBI ../bibi_configuration.xsd">
  <brainModel>
    <file>brain_model/braitenberg_mouse.py</file>
    <populations population="sensors" xsi:type="Range" from="0" to="2"/>
    <populations population="actors" xsi:type="Range" from="2" to="4"/>
    <populations population="record" xsi:type="Range" from="0" to="4"/>
  </brainModel>
  <bodyModel>mouse_v2_model/model.sdf</bodyModel>

  <transferFunction xsi:type="Neuron2Monitor" name="all_neurons_spike_monitor">
    <device name="all_neurons" type="SpikeRecorder">
      <neurons xsi:type="Range" population="record" from="0" to="4" step="1"/>
    </device>
  </transferFunction>


 <transferFunction xsi:type="PythonTransferFunction">
    #<![CDATA[
    import hbp_nrp_cle.tf_framework as nrp
    from hbp_nrp_cle.robotsim.RobotInterface import Topic
    import std_msgs.msg

    @nrp.MapSpikeSink("left_neuron", nrp.brain.actors[0], nrp.leaky_integrator_alpha)
    @nrp.MapSpikeSink("right_neuron", nrp.brain.actors[1], nrp.leaky_integrator_alpha)
    @nrp.Neuron2Robot(Topic('/robot/neck_joint/cmd_pos', std_msgs.msg.Float64))
    def head_twist(t, left_neuron, right_neuron):

            voltage_right=right_neuron.voltage
            voltage_left=left_neuron.voltage

            #Calculating the target position: the difference between the left and right neuron output
            data=(-50.0 * voltage_right + 50.0 * voltage_left )

            #Setting the limit for the joint position (makes sure the mouse head only turns enough to
            # center the red screen, this serves a different function than joint limits in the sdf)
            if abs(data)>0.3:
                        sign=data/(abs(data))# + or -
                        data=0.3*sign

            return std_msgs.msg.Float64(data)
    #]]>
  </transferFunction>


  <!--Input for the eyes: the total number of red pixels in the left/right image is used in each of the TFs-->
  <!--Right image-->
  <transferFunction xsi:type="PythonTransferFunction">
    #<![CDATA[
    import sensor_msgs.msg
    import hbp_nrp_cle.tf_framework.tf_lib

    @nrp.MapRobotSubscriber("camera_left", Topic('/mouse_left_eye/mouse/left_eye', sensor_msgs.msg.Image))
    @nrp.MapRobotSubscriber("camera_right", Topic('/mouse_right_eye/mouse/right_eye', sensor_msgs.msg.Image))
    @nrp.MapSpikeSource("red_left_eye", nrp.brain.sensors[0], nrp.poisson)
    @nrp.MapSpikeSource("red_right_eye", nrp.brain.sensors[1], nrp.poisson)
    @nrp.Robot2Neuron()
    def eye_sensor_transmit_right(t, camera_right, camera_left, red_left_eye, red_right_eye):

        image_results_left = hbp_nrp_cle.tf_framework.tf_lib.detect_red(image=camera_left.value)
        image_results_right = hbp_nrp_cle.tf_framework.tf_lib.detect_red(image=camera_right.value)

        red_right_eye.rate = 500.0 * (image_results_left.right+image_results_right.right)
        red_left_eye.rate = 500.0 * (image_results_left.left+image_results_right.left)

    #]]>
  </transferFunction>

</bibi>
